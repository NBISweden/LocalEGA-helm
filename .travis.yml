---
# We need the systemd for the kubeadm and it's default from 16.04+
dist: xenial
language: python
python:
  - "3.6"

env:
  global:
    - REPO_DIR=/home/travis/build/NBISweden/LocalEGA-helm
    - HELM_URL=https://storage.googleapis.com/kubernetes-helm/helm-v2.14.1-linux-amd64.tar.gz

stages:
  - name: lint
    if: type IN (push, pull_request)
  - name: deploy
    if: type = pull_request
  - name: publish
    if: type = push AND branch = master

jobs:
  include:
    - stage: lint
      sudo: required
      before_script:
        # Installing Helm
        #- curl https://raw.githubusercontent.com/kubernetes/helm/v2.13.1/scripts/get > get_helm.sh && chmod 700 get_helm.sh && ./get_helm.sh
        - curl -o helm.tar.gz $HELM_URL
        - tar -zxvf helm.tar.gz && sudo mv linux-amd64/helm /usr/local/bin/helm
        - helm init --client-only
        # generate secrets
        - git clone https://github.com/neicnordic/LocalEGA-deploy-init
        - sed -i "s/TRAVIS_BUILD_NUMBER/${TRAVIS_BUILD_NUMBER}/g" .ssh-keys/init-conf.json
        - cat .ssh-keys/init-conf.json
        - pip3 install LocalEGA-deploy-init/
        - legainit --cega --config-path ega-charts/localega/config --svc-config .ssh-keys/init-conf.json --cega-svc-config .ssh-keys/init-conf.json
        - keytool -import -trustcacerts -file ega-charts/localega/config/certs/root.ca.crt -alias legaCA -storetype JKS -keystore ega-charts/localega/config/certs/cacerts -storepass changeit -noprompt
        - cp ega-charts/localega/config/cega.* ega-charts/localega/config/users.* ega-charts/cega/conf/
        - cp -r ega-charts/localega/config/certs ega-charts/cega/conf/
      script:
        # Check ega-charts format
        - >
          for dir in `ls ${REPO_DIR}/ega-charts`; do
            helm lint ${REPO_DIR}/ega-charts/$dir -f ega-charts/localega/config/trace.yml
            if [ $? != 0 ]; then
              travis_terminate 1
            fi
          done

    - stage: deploy
      sudo: required
      before_script:
         # Decrypt config
        - openssl aes-256-cbc -K $encrypted_key -iv $encrypted_iv -in .ssh-keys/staging.enc -out .ssh-keys/kube-config -d -md md5
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.14.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - export KUBECONFIG=.ssh-keys/kube-config
        # Download helm
        #- curl https://raw.githubusercontent.com/kubernetes/helm/v2.13.1/scripts/get > get_helm.sh && chmod 700 get_helm.sh && ./get_helm.sh
        - curl -o helm.tar.gz $HELM_URL
        - tar -zxvf helm.tar.gz && sudo mv linux-amd64/helm /usr/local/bin/helm
        - helm init -c
        - mkdir -p ega-charts/localega/config
        # generate secrets
        - git clone https://github.com/neicnordic/LocalEGA-deploy-init
        - sed -i "s/TRAVIS_BUILD_NUMBER/${TRAVIS_BUILD_NUMBER}/g" .ssh-keys/init-conf.json
        - cat .ssh-keys/init-conf.json
        - pip3 install LocalEGA-deploy-init/
        - legainit --cega --config-path ega-charts/localega/config --svc-config .ssh-keys/init-conf.json --cega-svc-config .ssh-keys/init-conf.json
        - cp ega-charts/localega/config/cega.* ega-charts/localega/config/users.* ega-charts/cega/conf/
        - cp -r ega-charts/localega/config/certs ega-charts/cega/conf/
        - MINIO_ACCESS=$(grep s3_access_key ega-charts/localega/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        - MINIO_SECRET=$(grep s3_secret_key ega-charts/localega/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        - keytool -import -trustcacerts -file ega-charts/localega/config/certs/root.ca.crt -alias legaCA -storetype JKS -keystore ega-charts/localega/config/certs/cacerts -storepass changeit -noprompt
      script:
        - set +e
        - kubectl cluster-info
        # create secret for minios certificates
        - kubectl create ns travis-$TRAVIS_BUILD_NUMBER
        - kubectl -n travis-$TRAVIS_BUILD_NUMBER create secret generic minio-certs --from-file=ega-charts/localega/config/certs/s3.ca.crt --from-file=ega-charts/localega/config/certs/s3.ca.key
        - kubectl -n travis-$TRAVIS_BUILD_NUMBER create -f .ssh-keys/minio-rbac.yaml
        # Install minio
        - helm repo update
        - >
          helm install --namespace travis-$TRAVIS_BUILD_NUMBER --name travis-minio-$TRAVIS_BUILD_NUMBER 
          --set accessKey=$MINIO_ACCESS,secretKey=$MINIO_SECRET,minioConfig.region=lega,tls.enabled=true,tls.publicCrt=s3.ca.crt,tls.privateKey=s3.ca.key,tls.certSecret=minio-certs stable/minio --version 2.5.13
        - >
          until kubectl -n travis-$TRAVIS_BUILD_NUMBER get pods -lapp=minio -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' |
          grep "Ready=True"; do echo "waiting for minio to become ready"; sleep 10; done
        # Install fake CEGA
        - helm install --name travis-cega-$TRAVIS_BUILD_NUMBER --namespace travis-$TRAVIS_BUILD_NUMBER ega-charts/cega/ -f ega-charts/localega/config/trace.yml --set persistence.enabled=false
        - >
          until kubectl -n travis-$TRAVIS_BUILD_NUMBER get pods -l app=cega-users -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' |
          grep "Ready=True"; do echo "waiting for fake cega to become ready"; sleep 10; done
        # install LocalEGA
        - >
          helm install --name travis-lega-$TRAVIS_BUILD_NUMBER --namespace travis-$TRAVIS_BUILD_NUMBER ega-charts/localega/ -f ega-charts/localega/config/trace.yml 
          --set config.cega_users_host="https://cega-users",config.cega_mq_host="cega-mq",config.data_storage_url="https://travis-minio-$TRAVIS_BUILD_NUMBER:9000",inbox.location=/ega/$TRAVIS_BUILD_NUMBER,\
          ingest.coLocateInbox=true,persistence.enabled=false,config.data_storage_s3_bucket=lega,config.data_storage_s3_region=lega
        - >
          until kubectl -n travis-$TRAVIS_BUILD_NUMBER get pods -l role=database -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' |
          grep "Ready=True"; do echo "waiting for database to become ready"; sleep 10; done
        - >
          until kubectl -n travis-$TRAVIS_BUILD_NUMBER get pods -lrole=filedatabase -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' |
          grep "Ready=True"; do echo "waiting for filedatabase to become ready"; sleep 10; done
        # Run e2e test
        - sleep 10 # make sure that evertyhing is up and running
        - >
          helm upgrade travis-lega-$TRAVIS_BUILD_NUMBER ega-charts/localega -f ega-charts/localega/config/trace.yml
          --set config.cega_users_host="https://cega-users",config.cega_mq_host="cega-mq",config.data_storage_url="https://travis-minio-$TRAVIS_BUILD_NUMBER:9000",inbox.location="/ega/$TRAVIS_BUILD_NUMBER",\
          ingest.coLocateInbox=true,persistence.enabled=false,config.data_storage_s3_bucket=lega,config.data_storage_s3_region=lega,tester.run=true,tester.imagePullPolicy=Always
        - >
          until kubectl -n travis-$TRAVIS_BUILD_NUMBER get jobs localega-e2e-tester -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}' |
          grep "True"; do echo "Waiting for e2e test to complete"; sleep 30; done
        # cleanup after completion
        - helm delete --purge travis-cega-$TRAVIS_BUILD_NUMBER travis-lega-$TRAVIS_BUILD_NUMBER travis-minio-$TRAVIS_BUILD_NUMBER
        - kubectl delete ns travis-$TRAVIS_BUILD_NUMBER
      after_failure:
      # make sure we clean up the kubernetes environment if things should fail.
        - helm delete --purge travis-cega-$TRAVIS_BUILD_NUMBER travis-lega-$TRAVIS_BUILD_NUMBER travis-minio-$TRAVIS_BUILD_NUMBER
        - kubectl delete ns travis-$TRAVIS_BUILD_NUMBER
    - stage: publish
      env:
        - TARGET_BR=gh-pages
        - REPO_DIR=/home/travis/build/NBISweden/LocalEGA-helm
        - GH_URL=https://nbisweden.github.io/LocalEGA-helm/
      install:
        # Installing Helm
        #- curl https://raw.githubusercontent.com/kubernetes/helm/v2.12.2/scripts/get > get_helm.sh && chmod 700 get_helm.sh && ./get_helm.sh
        - curl -o helm.tar.gz $HELM_URL && tar -zxvf helm.tar.gz && sudo mv linux-amd64/helm /usr/local/bin/helm
        - helm init --client-only
      before_script:
        # Decrypt key
        - >
          openssl aes-256-cbc
          -K $encrypted_key
          -iv $encrypted_iv
          -in .ssh-keys/travis.enc
          -out .ssh-keys/travis
          -d
        # Add the keypair to the agent
        - chmod 600 .ssh-keys/travis
        - eval "$(ssh-agent -s)"
        - ssh-add .ssh-keys/travis
      script:
        # Temporary dir for storing new packaged ega-charts and index files
        - BUILD_DIR=$(mktemp -d)

        # Useful URLs
        - REPO_URL=`git config remote.origin.url`
        - SSH_REPO=${REPO_URL/https:\/\/github.com\//git@github.com:}
        - SHA=`git rev-parse --verify HEAD`

        # Push temporary directory to the stack
        - pushd $BUILD_DIR

        # Iterate over all ega-charts and package them
        - >
          for dir in `ls ${REPO_DIR}/ega-charts`; do
            helm dep update ${REPO_DIR}/ega-charts/$dir
            helm package ${REPO_DIR}/ega-charts/$dir
          done

        # Indexing of ega-charts
        - >
          if [ -f index.yaml ]; then
            helm repo index --url ${GH_URL} --merge index.yaml .
          else
            helm repo index --url ${GH_URL} .
          fi

        # Pop temporary directory from the stack
        - popd

        # List all the contents that we will push
        - ls ${BUILD_DIR}

        # Clone repository and empty target branch
        - git clone ${REPO_URL} out
        - cd out
        - git checkout ${TARGET_BR} || git checkout --orphan ${TARGET_BR}
        - cd ..

        # Copying contents of BUILD_DIR to out folder
        - cp $BUILD_DIR/* out/
        - cd out
        # Add all new files to staging phase and commit the changes
        - git config user.name "Travis CI"
        - git config user.email "travis@travis-ci.org"
        - git add -A .
        - git status
        - git commit -m "Travis deploy ${SHA}"
        # We can push.
        - git push ${SSH_REPO}
