---
language: python

env:
  global:
    - HELM_URL=https://storage.googleapis.com/kubernetes-helm
    - HELM_TGZ=helm-v2.10.0-linux-amd64.tar.gz
    - TARGET_BR=gh-pages
    - REPO_DIR=/home/travis/build/NBISweden/LocalEGA-helm
    - GH_URL=https://nbisweden.github.io/LocalEGA-helm

install:
  # Installing Helm
  - wget -q ${HELM_URL}/${HELM_TGZ}
  - tar xzfv ${HELM_TGZ}
  - PATH=`pwd`/linux-amd64/:$PATH
  - helm init --client-only

before_script:
  # Decrypt key
  - >
    openssl aes-256-cbc
    -K $encrypted_key
    -iv $encrypted_iv
    -in .ssh-keys/travis.enc
    -out .ssh-keys/travis
    -d

  # Add the keypair to the agent
  - chmod 600 .ssh-keys/travis
  - eval "$(ssh-agent -s)"
  - ssh-add .ssh-keys/travis

script:
  # Check charts format
  - >
     for dir in `ls ${REPO_DIR}/charts`; do
      helm lint ${REPO_DIR}/charts/$dir --set config.data_storage_url="https://s3.url",config.cega_endpoint="https://cega.fqdn",config.cega_mq_host="cega-mq"
      if [ $? != 0 ]; then
       travis_terminate 1
      fi
     done

after_success:
  - >
    echo $TRAVIS_BRANCH
    if [ $TRAVIS_BRANCH = feature/repo-fix ]; then
      # Temporary dir for storing new packaged charts and index files
      BUILD_DIR=$(mktemp -d)

      # Useful URLs
      REPO_URL=`git config remote.origin.url`
      SSH_REPO=${REPO_URL/https:\/\/github.com\//git@github.com:}
      SHA=`git rev-parse --verify HEAD`

      # Push temporary directory to the stack
      pushd $BUILD_DIR

      # Iterate over all charts are package them
      for dir in `ls ${REPO_DIR}/charts`; do
       helm dep update ${REPO_DIR}/charts/$dir
       helm package ${REPO_DIR}/charts/$dir
      done

      # Indexing of charts
      if [ -f index.yaml ]; then
       helm repo index --url ${GH_URL} --merge index.yaml .
      else
       helm repo index --url ${GH_URL} .
      fi

      # Pop temporary directory from the stack
      popd

      # List all the contents that we will push
      ls ${BUILD_DIR}

      # Clone repository and empty target branch
      git clone ${REPO_URL} out
      cd out
      git checkout ${TARGET_BR} || git checkout --orphan ${TARGET_BR}
      cd ..
      rm -rf out/* || exit 0

      # Copying contents of BUILD_DIR to out folder
      cp $BUILD_DIR/* out/
      cd out

      # Deploy if there are some changes
      git diff --quiet
      if [ $? != 0 ]; then
       # Add all new files to staging phase and commit the changes
       git config user.name "Travis CI"
       git config user.email "travis@travis-ci.org"
       git add -A .
       git status
       git commit -m "Travis deploy ${SHA}"
       # We can push.
       git push ${SSH_REPO}
      fi
    fi
