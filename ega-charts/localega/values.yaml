# Default values for localega.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

config:
  log: "debug"
  broker_connection_attempts: 30
  broker_enable_ssl: true
  broker_heartbeat: 0
  broker_port: 5671
  broker_retry_delay: 1
  broker_username: "guest" # local broker user, currently set to "guest"
  cega_users_host: # http://cega-users-server-fqdn
  cega_mq_host: "" # FQDN to cega mq host
  cega_mq_ssl: true
  cega_vhost: "" # vhost for central ega MQ service without leading slash
  cega_port: 5671
  cega_users_user: "" # user for cega users service
  cega_mq_user: "" # user for cega MQ service
  crypt4gh_private_key_path: ""
  jwt_public_key_path: ""
  postgres_pgdata: "/ega"
  postgres_db_name: "lega"
  postgres_host: "" # defaults to localega-db
  postgres_port: 5432
  postgres_try: 5
  postgres_try_interval: 1
  postgres_sslmode: "verify-ca"
  postgres_in_user: "lega_in"
  postgres_out_user: "lega_out"
  data_storage_type: "S3Storage" # S3Storage or FileStorage
# The four lines below is only used with S3 backend
  data_storage_url: "" # URl to S3 instance
  data_storage_port: 443
  data_storage_ca: "" #CA file if connecting to a prvate S3 service
  data_storage_s3_bucket: ""
  data_storage_s3_region: ""
  data_storage_s3_chunk_size: 16 # Chunk size in MB > 5
# The two lines below is only used with FileStorage
  data_storage_location: "/ega/data_archive" # path to data archive volume
  data_storage_mode: 2750
  tls_certs: true
  tls_cert_ending: ".crt"
  tls_key_ending: ".key"
  tls_ca_root_file: "ca.crt"
  # These are to be used when deploy for these services is set to false
  filedatabase_host: ""
  filedatabase_port: 443
  keys_host: ""
  keys_port: 443
  dataedge_host: ""
  dataedge_port: 443
  res_host: ""
  res_port: 443
  s3_proxy_url: ""
  s3_proxy_bucket: ""
  s3:proxy_region: ""

persistence: 
  enabled: true
## Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.

## RevisionHistory
##  If defined, set the revisionHistoryLimit of the deployment, defaults to 3
##  RevisionHistoryLimit is number of old ReplicaSets to retain to allow rollback.
# revisionHistory: 3

# Assume RBAC is enabled in the cluster
rbacEnabled: true

podSecurityPolicy:
  create: true

# utilize network isolation
# Make sure youâ€™ve configured a network provider with network policy support.
# There are a number of network providers that support NetworkPolicy, including:
# Calico, Cilium, Kube-router, Romana and Weave Net
networkPolicy:
  create: false

  # This section configures the network policy for accessing the CEGA rabbitMQ broker.
  cegaMqBroker:
    # If the broker is running in the same k8s cluster use the section below.
    # - namespaceSelector:
    #     matchLabels:
    #       name: MQ_NAMESPACE_NAME
    #   podSelector:
    #       matchLabels:
    #         app: MQ_SERVICE_NAME

    # If the broker is sunning outside the k8s cluster use the section below.
    - ipBlock:
        cidr: 0.0.0.0/0
# If the CIDR for the external rabbitMQ server is known the 4 lines below can be commented out.
        except:
          - 10.0.0.0/8
          - 192.168.0.0/16
          - 172.16.0.0/20

  # This section configures the network policy for accessing an external postgres server.
  postgres:
    # If the postgres server is running in the same k8s cluster use the section below.
    # - namespaceSelector:
    #     matchLabels:
    #       name: DB_NAMESPACE_NAME
    #   podSelector:
    #       matchLabels:
    #         app: DB_SERVICE_NAME

    # If the postgres server is sunning outside the k8s cluster use the section below.
    - ipBlock:
        cidr: 0.0.0.0/0

  # This section configures the network policy for accessing the S3 data archive
  S3Storage:
    # If the S3 service is running in the same k8s cluster use the section below.
    # - namespaceSelector:
    #     matchLabels:
    #       name: S3_NAMESPACE_NAME
    #   podSelector:
    #       matchLabels:
    #         app: S3_SERVICE_NAME

    # If the S3 server is running outside the k8s cluster use the section below.
    - ipBlock:
        cidr: 0.0.0.0/0
# If the CIDR for the S3 storage server is known the 4 lines below can be commented out.
        except:
          - 10.0.0.0/8
          - 192.168.0.0/16
          - 172.16.0.0/20

secrets:
  cega_users_pass: ""
  cega_mq_pass: ""
  pgp_passphrase: ""
  shared_pgp_password: ""
  mq_password: ""
  mq_password_hash: ""
  pg_out_password: ""
  pg_in_password: ""
  s3_access_key: ""
  s3_secret_key: ""
  token: ""
  s3_proxy_access_key: ""
  s3_proxy_secret_key: ""

ingress:
  deploy: false
  hostName: ""
  tls: true
  secretName: ""
  # issuer requires a configured cert-manager
  issuer: ""

dataedge:
  deploy: true
  name: dataedge
  repository: nbisweden/ega-dataedge
  imageTag: m7
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "1024Mi"
      cpu: "500m"
  port: 8080
  servicePort: 9059
  debug: 5058
  logpath: "/tmp/logs"
  keystorePass: "changeit"
  ingress:
    path: "/dataedge"

doa:
  deploy: true
  name: doa
  repository: nbisweden/ega-doa
  imageTag: latest
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "1024Mi"
      cpu: "500m"
  port: 8080
  servicePort: 8080
  debug: 1234
  logpath: "/tmp/logs"
  keystorePass: "changeit"

filedatabase:
  deploy: true
  name: filedatabase
  repository: nbisweden/ega-filedb
  imageTag: m7
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "1024Mi"
      cpu: "500m"
  port: 8080
  servicePort: 9050
  debug: 5050
  keystorePass: "changeit"

inbox:
  deploy: true
  name: inbox
  repository: nbisweden/ega-mina-inbox
  imageTag: m7
  imagePullPolicy: IfNotPresent
  inboxPath: ""
  replicaCount: 1
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "250m"
  persistence:
    existingClaim: ""
    storageSize: 1Gi
    storageClass: ""
    flexVolume:
      driver: "" #ceph.rook.io/rook
      fsType: "" #ceph
      fsName: "" #sharedfs
      clusterNamespace: "" #rook-ceph
    nfs:
      server: ""
      path: ""
  location: "/ega/inbox" # path to inbox volume
  port: 9000
  service:
    type: ClusterIP
    port: 2222
  keystorePass: "inbox"

ingest:
  deploy: true
  name: ingest
  replicaCount: 1
  repository: nbisweden/ega-base
  imageTag: m7
  imagePullPolicy: IfNotPresent
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "250m"
## co-locate inbox with ingest
# If the deployment requires the use of hostPath volumes for the shared filesystem
# that is used by inbox and ingest, set coLocateInbox: true
  coLocateInbox: false
  persistence:
    existingClaim: ""
    storageSize: 1Gi
    storageClass: ""
    flexVolume:
      driver: "" #ceph.rook.io/rook
      fsType: "" #ceph
      fsName: "" #sharedfs
      clusterNamespace: "" #rook-ceph
    nfs:
      server: ""
      path: ""

keys:
  deploy: true
  name: keys
  repository: nbisweden/ega-keyserver
  imageTag: m7
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "1024Mi"
      cpu: "500m"
  port: 8080
  servicePort: 9095
  debug: 5054
  keystorePass: "changeit"

finalize:
  deploy: true
  name: finalize
  replicaCount: 1
  repository: nbisweden/ega-base
  imageTag: m7
  imagePullPolicy: IfNotPresent
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "250m"

mq:
  deploy: true
  name: mq
  repository: nbisweden/ega-mq
  imageTag: m7
  imagePullPolicy: IfNotPresent
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "250m"
  persistence:
    existingClaim: ""
    storageSize: 2Gi
  metrics:
    enabled: false
    repository: kbudde/rabbitmq-exporter
    imageTag: v0.29.0
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        memory: 256Mi
        cpu: 100m

postgres:
  deploy: true
  name: db
  repository: nbisweden/ega-db
  imageTag: m7-v2
  imagePullPolicy: IfNotPresent
  port: 5432
  servicePort: 5432
  persistence:
    existingClaim: ""
    storageSize: 1Gi
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "250m"
  metrics:
    enabled: false
    repository: wrouesnel/postgres_exporter
    imageTag: v0.4.6
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        memory: 256Mi
        cpu: 100m

s3proxy:
  deploy: false
  name: s3proxy
  repository: nbisweden/ega-s3proxy
  imageTag: 0.1
  imagePullPolicy: Always
  replicaCount: 1
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "1024Mi"
      cpu: "500m"
  port: 443
  servicePort: 443
  use_credentials_file: false

res:
  deploy: true
  name: res
  repository: nbisweden/ega-res
  imageTag: m7
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "1024Mi"
      cpu: "500m"
  port: 8080
  servicePort: 9090
  debug: 5058
  keystorePass: "changeit"
  ingress:
    path: "/res"
## co-locate verify with res and ingest
# If the deployment requires the use of local volumes for the shared filesystem
# that is used by verify, res and ingest, set coLocateIngest: true
  coLocateIngest: false

verify:
  deploy: true
  name: verify
  replicaCount: 1
  repository: nbisweden/ega-base
  imageTag: m7
  imagePullPolicy: IfNotPresent
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "250m"
## co-locate verify with res and ingest
# If the deployment requires the use of local volumes for the shared filesystem
# that is used by verify, res and ingest, set coLocateIngest: true
  coLocateIngest: false

tester:
  run: false
  name: tester
  log: "debug"
  size: "small"
  repository: nbisweden/localega-tester
  imageTag: m7-v2
  imagePullPolicy: IfNotPresent
