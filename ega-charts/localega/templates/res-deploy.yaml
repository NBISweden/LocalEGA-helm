apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "localega.fullname" . }}-res
  labels:
    role: res
    app: {{ template "localega.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: "{{ .Values.res.name }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.res.replicaCount }}
  revisionHistoryLimit: {{ default "3" .Values.revisionHistory }}
  selector:
    matchLabels:
      app: {{ template "localega.name" . }}-res
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "localega.name" . }}-res
        role: res
        release: {{ .Release.Name }}
    spec:
    {{- if .Values.rbacEnabled}}
      serviceAccountName: {{ .Release.Name }}
    {{- end }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        allowPrivilegeEscalation: false
{{- if .Values.res.coLocateIngest }}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: role
                operator: In
                values:
                - ingest
            topologyKey: "kubernetes.io/hostname"
{{- end }}
      containers:
      - name: res
        image: "{{ .Values.res.repository }}:{{ .Values.res.imageTag }}"
        imagePullPolicy: {{ .Values.res.imagePullPolicy | quote }}
        command: ["java", "-jar", "ega-data-api-res-0.0.1-SNAPSHOT.jar"]
        resources:
{{ toYaml .Values.res.resources | trim | indent 10 }}
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: {{ if eq "FileStorage" .Values.config.data_storage_type }} no-oss,default {{ else }} no-oss,LocalEGA {{ end }}
        - name: FILEDATABASE_SERVERS
          value: "{{ template "localega.name" . }}-filedatabase:{{ .Values.filedatabase.servicePort }}"
        - name: KEYS_SERVERS
          value: "{{ template "localega.name" . }}-keys:{{ .Values.keys.servicePort }}"
        - name: EGA_EGA_EXTERNAL_URL
          value:
        - name: EGA_EGA_CRAM_FASTA_A
          value:
        - name: EGA_EGA_CRAM_FASTA_B
          value:
        - name: EGA_EBI_FIRE_URL
          value:
        - name: EGA_EBI_FIRE_ARCHIVE
          value:
        - name: EGA_EBI_FIRE_KEY
          value:
        - name: SERVICE_ARCHIVE_CLASS
          value:
        - name: EGA_SHAREDPASS_PATH
          value: /etc/ega/shared.pass
        {{- if eq "S3Storage" .Values.config.data_storage_type }}
        - name: EGA_EBI_AWS_ENDPOINT_URL
          value: {{ required "A valid .Values.config.data_storage_url entry required!" .Values.config.data_storage_url | quote }}
        - name: EGA_EBI_AWS_ACCESS_KEY
          valueFrom:
              secretKeyRef:
                name: {{ template "localega.name" . }}-s3-keys
                key: s3_access_key
        - name: EGA_EBI_AWS_ACCESS_SECRET
          valueFrom:
              secretKeyRef:
                name: {{ template "localega.name" . }}-s3-keys
                key: s3_secret_key
        - name: EGA_EBI_AWS_ENDPOINT_REGION
          value:
        {{- end }}
        - name: KEY_STORE
          value: "/ega/tls/res.p12"
        - name: KEY_STORE_PASSWORD
          value: {{ .Values.res.keystorePass | quote }}
        ports:
        - containerPort: {{ .Values.res.port }}
          name: res-app-port
          protocol: TCP
        livenessProbe:
          tcpSocket:
            port: res-app-port
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          tcpSocket:
            port: res-app-port
          initialDelaySeconds: 30
          periodSeconds: 15
        volumeMounts:
          - name: res-shared-pass
            mountPath: /etc/ega/
          - name: tls-certs
            mountPath: "/ega/tls"
          - name: ca-cert
            mountPath: "/etc/ssl/certs/java"
          {{- if eq "FileStorage" .Values.config.data_storage_type }}
          - name: lega-archive
            mountPath: /ega/archive
          {{- end }}
      volumes:
        - name: res-shared-pass
          secret:
            secretName: {{ template "localega.name" . }}-shared-password
        - name: tls-certs
          secret:
            secretName: {{ template "localega.name" . }}-res-certs
        - name: ca-cert
          projected:
            defaultMode: 0440
            sources:
            - secret:
                name: {{ template "localega.name" . }}-res-certs
                items:
                  - key: cacerts
                    path: cacerts
      {{- if eq "FileStorage" .Values.config.data_storage_type }}
        - name: lega-archive
        {{- if and .Values.persistence.enabled .Values.podSecurityPolicy.create }}
          {{- if .Values.ingest.persistence.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.ingest.persistence.existingClaim }}
          {{- else if (eq "flexVolume" .Values.ingest.persistence.storageClass) }}
          flexVolume:
            driver: {{ .Values.ingest.persistence.flexVolume.driver | quote }}
            fsType: {{ .Values.ingest.persistence.flexVolume.fsType | quote }}
            options:
              fsName: {{ .Values.ingest.persistence.flexVolume.fsName | quote }}
              clusterNamespace:  {{ .Values.ingest.persistence.flexVolume.clusterNamespace | quote }}
          {{- else if (eq "nfs" .Values.ingest.persistence.storageClass) }}
          source:
            nfs:
              server: {{ if .Values.ingest.persistence.nfs.server }}{{ .Values.ingest.persistence.nfs.server | quote }}{{ end }}
              path: {{ if .Values.ingest.persistence.nfs.path }}{{ .Values.ingest.persistence.nfs.path | quote }}{{ else }}{{ "/" }}{{ end }}
              readOnly: false
          {{- end }}
        {{- else }}
          hostPath:
            path: {{ .Values.config.data_storage_location | quote }}
            type: Directory
        {{- end }}
      {{- end }}
