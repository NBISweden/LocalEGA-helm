{{ if eq "nbisweden/ega-mina-inbox" .Values.inbox.repository }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "localega.fullname" . }}-inbox
  labels:
    role: inbox
    app: {{ template "localega.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: "{{ .Values.inbox.name }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  revisionHistoryLimit: {{ default "3" .Values.revisionHistory }}
  serviceName: inbox
  selector:
    matchLabels:
      app: {{ template "localega.name" . }}-inbox
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "localega.name" . }}-inbox
        role: inbox
        release: {{ .Release.Name }}
        type: mina-inbox
    spec:
{{- if or .Values.ingest.coLocateInbox }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: role
                operator: In
                values:
                - ingest
{{- end }}
      initContainers:
      - name: tls-init
        image: "jombyl/openssl:alpine-3.9"
        command: ["/bin/sh", "-c"]
        args: ["openssl pkcs12 -export -out /tls/inbox.p12 -inkey /tls-certs/inbox{{ .Values.config.tls_key_ending }} -in /tls-certs/inbox{{ .Values.config.tls_cert_ending }} -passout pass:${PASS}"]
        env:
        - name: PASS
          value: {{ .Values.inbox.keystorePass | quote }}
        volumeMounts:
        - name: tls-certs
          mountPath: /tls-certs
        - name: tls
          mountPath: /tls
      containers:
      - name: inbox
        image: "{{ .Values.inbox.repository }}:{{ .Values.inbox.imageTag }}"
        imagePullPolicy: {{ .Values.inbox.imagePullPolicy | quote }}
        resources:
{{ toYaml .Values.inbox.resources | indent 10 }}
        env:
        - name: LOGGING_LEVEL_SE_NBIS_LEGA_INBOX
          value: {{ .Values.config.log | quote }}
        - name: BROKER_HOST
          value: {{ if .Values.config.broker_host }}{{ .Values.config.broker_host | quote }}{{ else }}{{ template "localega.name" . }}-mq{{ end }}
        - name: BROKER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "localega.name" . }}-mq-pass
              key: password
        - name: BROKER_PORT
          value: {{.Values.config.broker_port | quote }}
        - name: BROKER_USERNAME
          value: {{ .Values.config.broker_username | quote }}
        - name: BROKER_VHOST
          value: "/"
        - name: INBOX_PORT
          value: {{ .Values.inbox.port | quote }}
        - name: CEGA_ENDPOINT
        {{ if .Values.config.cega_users_host }}
          value: {{ printf "%s%s" .Values.config.cega_users_host "/lega/v1/legas/users/%s?idType=username" | quote }}
        {{ else }}
          value: {{ required "A valid .Values.config.cega_users_host URL are required" .Values.config.cega_users_host }}
        {{ end }}
        - name: CEGA_ENDPOINT_CREDS
          valueFrom:
            secretKeyRef:
              name: {{ template "localega.name" . }}-cega-users-creds
              key: credentials
        - name: KEYSTORE_PATH
          value: "/ega/tls/inbox.p12"
        - name: KEYSTORE_PASSWORD
          value: {{ .Values.inbox.keystorePass | quote }}
        - name: KEYSTORE_TYPE
          value: "PKCS12"
        - name: USE_SSL
          value: "true"
        ports:
        - name: inbox
          containerPort: {{ .Values.inbox.port }}
          protocol: TCP
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 1
        volumeMounts:
        - name: lega-inbox
          mountPath: "/ega/inbox"
        - name: tls
          mountPath: "/ega/tls"
        - name: ca-cert
          mountPath: "/usr/local/share/ca-certificates"
      volumes:
        - name: tls
          emptyDir:
            medium: Memory
            sizeLimit: 100Mi
        - name: tls-certs
          secret:
            secretName: {{ template "localega.name" . }}-inbox-certs
        - name: ca-cert
          projected:
              sources:
              - secret:
                  name: {{ template "localega.name" . }}-inbox-certs
                  items:
                    - key: {{ .Values.config.tls_ca_root_file }}
                      path: {{ .Values.config.tls_ca_root_file }}
        - name: lega-inbox
        {{- if .Values.persistence.enabled }}
          {{ if .Values.inbox.persistence.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.inbox.persistence.existingClaim }}
          {{ else if (eq "flexVolume" .Values.inbox.persistence.storageClass) }}
          flexVolume:
            driver: {{ .Values.inbox.persistence.flexVolume.driver | quote }}
            fsType: {{ .Values.inbox.persistence.flexVolume.fsType | quote }}
            options:
              fsName: {{ .Values.inbox.persistence.flexVolume.fsName | quote }}
              clusterNamespace:  {{ .Values.inbox.persistence.flexVolume.clusterNamespace | quote }}
          {{ else if (eq "nfs" .Values.inbox.persistence.storageClass) }}
          source:
            nfs:
              server: {{ if .Values.inbox.persistence.nfs.server }}{{ .Values.inbox.persistence.nfs.server | quote }}{{ end }}
              path: {{ if .Values.inbox.persistence.nfs.path }}{{ .Values.inbox.persistence.nfs.path | quote }}{{- else }}{{ "/" }}{{- end }}
              readOnly: false
          {{ end }}
        {{ else }}
          hostPath:
            path: {{ .Values.inbox.location | quote }}
            type: Directory
        {{ end }}
{{ end }}