{{- if .Values.postgres.deploy }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "localega.postgres.fullname" . }}
  labels:
    app: {{ template "localega.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: "{{ .Values.postgres.name }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    role: db
spec:
  replicas: 1
  revisionHistoryLimit: {{ default "3" .Values.revisionHistory }}
  strategy:
    type: "Recreate"
  selector:
    matchLabels:
      app: {{ template "localega.name" . }}-db
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "localega.name" . }}-db
        role: database
        release: {{ .Release.Name }}
    spec:
    {{- if .Values.rbacEnabled}}
      serviceAccountName: {{ .Release.Name }}
    {{- end }}
      securityContext:
        runAsUser: 70
        fsGroup: 70
        allowPrivilegeEscalation: false
      containers:
      - name: postgresql
        image: "{{ .Values.postgres.repository }}:{{ .Values.postgres.imageTag }}"
        imagePullPolicy: {{ .Values.postgres.imagePullPolicy | quote }}
        resources:
{{ toYaml .Values.postgres.resources | trim | indent 10 }}
        env:
        - name: PGDATA
          value: {{ .Values.config.postgres_pgdata }}/data
        - name: DB_LEGA_IN_PASSWORD
          valueFrom:
              secretKeyRef:
                name: {{ template "localega.name" . }}-db-secret
                key: pg_in_password
        - name: DB_LEGA_OUT_PASSWORD
          valueFrom:
              secretKeyRef:
                name: {{ template "localega.name" . }}-db-secret
                key: pg_out_password
        - name: PG_SERVER_CERT
          value: /tls/db{{ .Values.config.tls_cert_ending }}
        - name: PG_SERVER_KEY
          value: /tls/db{{ .Values.config.tls_key_ending }}
        - name: PG_CA
          value: /tls/{{ .Values.config.tls_ca_root_file }}
        - name: PG_VERIFY_PEER
          value: "0"
        ports:
        - name: postgres
          containerPort: {{ .Values.postgres.port }}
        volumeMounts:
        - name: data
          mountPath: {{ .Values.config.postgres_pgdata }}
        - name: tls-certs
          mountPath: /tls
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -h
            - localhost
            - -U
            - {{ .Values.config.postgres_in_user}}
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -h
            - localhost
            - -U
            - {{ .Values.config.postgres_in_user}}
          initialDelaySeconds: 5
          timeoutSeconds: 1
      {{- if .Values.postgres.metrics.enabled }}
      - name: metrics
        image: "{{ .Values.postgres.metrics.repository }}:{{ .Values.postgres.metrics.imageTag }}"
        imagePullPolicy: {{ default "" .Values.postgres.metrics.imagePullPolicy | quote }}
        env:
        - name: DATA_SOURCE_NAME
          value: postgresql://{{ default "lega" .Values.postgres.metricsUser }}@127.0.0.1:5432?sslmode=disable
        ports:
        - name: metrics
          containerPort: 9187
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 30
        readinessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 30
        resources:
{{ toYaml .Values.postgres.metrics.resources | trim | indent 10 }}
      {{- end }}
      volumes:
      - name: tls-certs
        secret:
          defaultMode: 0440
          secretName: {{ template "localega.name" . }}-db-certs
  {{- if and .Values.persistence.enabled .Values.postgres.persistence.existingClaim }}
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Values.postgres.persistence.existingClaim | quote }}
  {{- else if not .Values.persistence.enabled }}
      - name: data
        emptyDir: {}
  {{- else if and .Values.persistence.enabled (not .Values.postgres.persistence.existingClaim) }}
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: {{ template "localega.postgres.fullname" . }}
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.postgres.persistence.storageSize }}
    {{- if .Values.persistence.storageClass }}
      storageClassName: {{ .Values.persistence.storageClass | quote}}
    {{- end }}
  {{- end -}}
{{- end }}