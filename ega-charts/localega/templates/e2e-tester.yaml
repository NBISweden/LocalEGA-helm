{{- if .Values.tester.run }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "localega.name" . }}-e2e-test
  labels:
    app: {{ template "localega.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
{{ ( .Files.Glob "config/key.1.pub" ).AsConfig | trim | indent 2 }}
  config.yaml: |-
    localega:
      token: {{ .Values.secrets.token }}
      # Username to identify the user in CentralEGA
      user: dummy
      # User secret private RSA key.
      user_key: /conf/dummy.key
      # Public key file to encrypt file.
      encrypt_key_public: /conf/key.1.pub
      # Private key file to encrypt file.
      encrypt_key_private: /conf/key.1.sec
      # Private key password.
      encrypt_key_pass: {{ .Values.secrets.pgp_passphrase }}
      # Inbox address, or service name
      inbox_address: {{ template "localega.name" . }}-inbox
      # Inbox port
      inbox_port: {{ .Values.inbox.service.port }}
      tls_cert_tester: "/conf/tester{{ .Values.config.tls_cert_ending }}"
      tls_key_tester: "/conf/tester{{ .Values.config.tls_key_ending }}"
      tls_ca_root_file: "/conf/{{ .Values.config.tls_ca_root_file }}"
      # S3 address, or service name, should include port number
      s3_ssl: "true"
      s3_public: "false"
      s3_address: {{ .Values.config.s3_archive_url }}
      s3_access: {{ .Values.secrets.s3_archive_access_key }}
      s3_secret: {{ .Values.secrets.s3_archive_secret_key }}
      s3_region: {{ .Values.config.s3_archive_region }}
      s3_bucket: {{ .Values.config.s3_archive_bucket }}
      # CentralEGA Message Broker address
      cm_address: {{ .Values.config.cega_mq_host }}
      cm_port: {{ .Values.config.cega_port }}
      # CentralEGA Message Broker Country specific details
      cm_ssl: {{ if .Values.config.cega_mq_ssl }} true {{ else }} false {{ end }}
      cm_user: {{ .Values.config.cega_mq_user }}
      cm_vhost: {{ .Values.config.cega_vhost }}
      cm_pass: {{ .Values.secrets.cega_mq_pass }}
      # RES address or service name with port
      res_address: {{ template "localega.name" . }}-res
      res_port: {{ .Values.res.servicePort }}
      # DataEdge address or service name with port
      dataedge_address: {{ template "localega.name" . }}-dataedge
      dataedge_port: {{ .Values.dataedge.servicePort }}
      # DB address, port will be assumed 5432
      db_address: {{ template "localega.name" . }}-db
      db_in_user: {{ .Values.config.postgres_in_user }}
      db_out_user: {{ .Values.config.postgres_out_user }}
      db_name: {{ .Values.config.postgres_db_name }}
      db_in_pass: {{ .Values.secrets.pg_in_password }}
      db_out_pass: {{ .Values.secrets.pg_out_password }}
      db_ssl: "true"
---
{{- $cafile := .Files.Glob (printf "config/certs/%s" .Values.config.tls_ca_root_file) }}
{{- $tester := .Files.Glob "config/certs/tester.*" }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "localega.name" . }}-e2e-secret
  labels:
    app: {{ template "localega.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
{{ ( .Files.Glob "config/dummy.key" ).AsSecrets | trim | indent 2 }}
{{ ( $cafile ).AsSecrets | trim | indent 2 }}
{{ ( $tester ).AsSecrets | trim | indent 2 }}
---
{{- if ne "small" .Values.tester.size }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: localega-e2e-tester-pvc
spec:
{{- if .Values.persistence.storageClass }}
  storageClassName: {{ .Values.persistence.storageClass | quote }}
{{- end }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "50Gi"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: localega-e2e-tester-pv
spec:
{{- if .Values.persistence.storageClass }}
  storageClassName: {{ .Values.persistence.storageClass | quote }}
{{- end }}
  claimRef:
    namespace: {{ .Release.Namespace }}
    name: localega-e2e-tester-pvc
  capacity:
    storage: "50Gi"
  accessModes:
    - ReadWriteOnce
---
{{- end }}

apiVersion: batch/v1
kind: Job
metadata:
  name: localega-e2e-tester
  labels:
    role: e2e-tester
    app: localega-e2e-tester
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  ttlSecondsAfterFinished: 60
  template:
    spec:
    {{- if .Values.rbacEnabled}}
      serviceAccountName: {{ .Release.Name }}
    {{- end }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
    {{- if .Values.res.coLocateIngest }}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: role
                operator: In
                values:
                - ingest
            topologyKey: "kubernetes.io/hostname"
    {{- end }}
      containers:
      - name: e2e-tester
        image: "{{ .Values.tester.repository }}:{{ .Values.tester.imageTag }}"
        imagePullPolicy: {{ .Values.tester.imagePullPolicy | quote }}
        securityContext:
          allowPrivilegeEscalation: false
        env:
          - name: DEFAULT_LOG
            value: {{ .Values.tester.log | quote }}
          - name: SIZE
            value: {{ .Values.tester.size | quote }}
          - name: SSL_CERT_FILE
            value: "/conf/{{ .Values.tls_ca_root_file }}"
        livenessProbe:
          exec:
            command:
            - cat
            - /etc/TZ
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /conf
        - name: file-download
          mountPath: /volume
      {{- if eq "FileStorage" .Values.config.data_storage_type }}
        - name: lega-archive
          mountPath: /ega/archive
      {{- end }}
      restartPolicy: Never
      volumes:
        - name: file-download
        {{- if ne "small" .Values.tester.size }}
          persistentVolumeClaim:
            claimName: localega-e2e-tester-pvc
        {{- else }}
          emptyDir:
            medium: Memory
            sizeLimit: 100Mi
        {{- end }}
        - name: config
          projected:
            sources:
            - configMap:
                name: {{ template "localega.name" . }}-e2e-test
                items:
                - key: config.yaml
                  path: config.yaml
                - key: key.1.pub
                  path: key.1.pub
            - secret:
                name: {{ template "localega.name" . }}-keyserver-secret
                items:
                - key: key.1.sec
                  path: key.1.sec
            - secret:
                name: {{ template "localega.name" . }}-e2e-secret
                items:
                - key: dummy.key
                  path: dummy.key
                - key: root.ca.crt
                  path: root.ca.crt
                - key: tester.ca.crt
                  path: tester.ca.crt
                - key: tester.ca.key
                  path: tester.ca.key
      {{- if eq "FileStorage" .Values.config.data_storage_type }}
        - name: lega-archive
        {{- if and .Values.persistence.enabled .Values.podSecurityPolicy.create }}
          {{- if .Values.ingest.persistence.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.ingest.persistence.existingClaim }}
          {{- else if (eq "flexVolume" .Values.ingest.persistence.storageClass) }}
          flexVolume:
            driver: {{ .Values.ingest.persistence.flexVolume.driver | quote }}
            fsType: {{ .Values.ingest.persistence.flexVolume.fsType | quote }}
            options:
              fsName: {{ .Values.ingest.persistence.flexVolume.fsName | quote }}
              clusterNamespace:  {{ .Values.ingest.persistence.flexVolume.clusterNamespace | quote }}
          {{- else if (eq "nfs" .Values.ingest.persistence.storageClass) }}
          source:
            nfs:
              server: {{ if .Values.ingest.persistence.nfs.server }}{{ .Values.ingest.persistence.nfs.server | quote }}{{ end }}
              path: {{ if .Values.ingest.persistence.nfs.path }}{{ .Values.ingest.persistence.nfs.path | quote }}{{ else }}{{ "/" }}{{ end }}
              readOnly: false
          {{- end }}
        {{- end }}
      {{- end }}
{{- end }}