{{- if .Values.verify.deploy }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "localega.fullname" . }}-verify
  labels:
    role: verify
    app: {{ template "localega.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: "{{ .Values.verify.name }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  revisionHistoryLimit: {{ default "3" .Values.revisionHistory }}
  selector:
    matchLabels:
      app: {{ template "localega.name" . }}-verify
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "localega.name" . }}-verify
        role: verify
        release: {{ .Release.Name }}
      annotations:
        checksum/conf: {{ include (print $.Template.BasePath "/verify-conf.yaml") . | sha256sum }}
    spec:
    {{- if .Values.rbacEnabled}}
      serviceAccountName: {{ .Release.Name }}
    {{- end }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
{{- if .Values.verify.coLocateIngest }}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: role
                operator: In
                values:
                - ingest
            topologyKey: "kubernetes.io/hostname"
{{- end }}
      initContainers:
      - name: tls-init
        image: busybox
        command: ["/bin/sh", "-c"]
        args: ["/bin/cp /tls-certs/* /tls/ && chown 1000:1000 /tls/* && chmod 0400 /tls/*"]
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: tls-certs
          mountPath: /tls-certs
        - name: tls
          mountPath: /tls
      containers:
      - name: verify
        image: "{{ .Values.verify.repository }}:{{ .Values.verify.imageTag }}"
        imagePullPolicy: {{ .Values.verify.imagePullPolicy | quote }}
        command: ["ega-verify"]
        args: ["--log", {{ .Values.config.log | quote }}]
        securityContext:
          allowPrivilegeEscalation: false
        env:
        - name: LEGA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "localega.name" . }}-shared-password
              key: shared.pass
        resources:
{{ toYaml .Values.verify.resources | trim | indent 10 }}
        volumeMounts:
        - name: conf
          mountPath: /etc/ega/
        - name: c4gh
          mountPath: /etc/ega/c4gh/
        - name: tls
          mountPath: /etc/ega/ssl
        {{- if eq "FileStorage" .Values.config.data_storage_type }}
        - name: lega-archive
          mountPath: {{ .Values.config.data_storage_location | quote }}
        {{- end }}
      volumes:
        - name: tls-certs
          secret:
            secretName: {{ template "localega.name" . }}-verify-certs
        - name: tls
          emptyDir:
            medium: Memory
            sizeLimit: 10Mi
        - name: c4gh
          secret:
            defaultMode: 0440
            secretName: {{ template "localega.name" . }}-c4gh
        - name: conf
          projected:
            defaultMode: 0440
            sources:
            - configMap:
                name: {{ template "localega.name" . }}-verify-conf
      {{- if eq "FileStorage" .Values.config.data_storage_type }}
        - name: lega-archive
        {{- if and .Values.persistence.enabled .Values.podSecurityPolicy.create }}
          {{- if .Values.ingest.persistence.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.ingest.persistence.existingClaim }}
          {{- else if (eq "flexVolume" .Values.ingest.persistence.storageClass) }}
          flexVolume:
            driver: {{ .Values.ingest.persistence.flexVolume.driver | quote }}
            fsType: {{ .Values.ingest.persistence.flexVolume.fsType | quote }}
            options:
              fsName: {{ .Values.ingest.persistence.flexVolume.fsName | quote }}
              clusterNamespace:  {{ .Values.ingest.persistence.flexVolume.clusterNamespace | quote }}
          {{- else if (eq "nfs" .Values.ingest.persistence.storageClass) }}
          nfs:
            server: {{ if .Values.ingest.persistence.nfs.server }}{{ .Values.ingest.persistence.nfs.server | quote }}{{ end }}
            path: {{ if .Values.ingest.persistence.nfs.path }}{{ .Values.ingest.persistence.nfs.path | quote }}{{ else }}{{ "/" }}{{ end }}
          {{- end }}
        {{- else }}
          hostPath:
            path: {{ .Values.config.data_storage_location | quote }}
            type: Directory
        {{- end }}
      {{- end }}
      restartPolicy: Always
{{- end }}
